!<arch>
//                                              42        `
7-print_chessboard.c/
8-print_diagsums.c/
0-main.c/       0           0     0     644     729       `
#include "main.h"
#include <stdio.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
	unsigned int i;

	i = 0;
	while (i < size)
	{
		if (i % 10)
		{
			printf(" ");
		}
		if (!(i % 10) && i)
		{
			printf("\n");
		}
		printf("0x%02x", buffer[i]);
		i++;
	}
	printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char buffer[98] = {0x00};

	simple_print_buffer(buffer, 98);
	_memset(buffer, 0x01, 95);
	printf("-------------------------------------------------\n");
	simple_print_buffer(buffer, 98);
	return (0);
}

0-memset.c/     0           0     0     644     265       `
#include "main.h"

/**
  * _memset - in to main
  * @s: pointer to char
  * @b: char
  * @n: unsigned int
  * Return: pointer to char
  */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

1-main.c/       0           0     0     644     804       `
#include "main.h"
#include <stdio.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
	unsigned int i;

	i = 0;

	while (i < size)
	{
		if (i % 10)
		{
			printf(" ");
		}
		if (!(i % 10) && i)
		{
			printf("\n");
		}
		printf("0x%02x", buffer[i]);
		i++;
	}
	printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char buffer[98] = {0};
	char buffer2[98] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

	simple_print_buffer(buffer, 98);
	_memcpy(buffer + 50, buffer2, 10);
	printf("-------------------------------------------------\n");
	simple_print_buffer(buffer, 98);
	return (0);
}
1-memcpy.c/     0           0     0     644     273       `
#include "main.h"

/**
  * _memcpy - copies memory area
  * @dest: pointer
  * @src: pointer
  * @n: constant
  * Return: s
  */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a = 0;

	while (a < n)
	{
		dest[a] = src[a];
		a++;
	}
	return (dest);
}

2-main.c/       0           0     0     644     224       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s = "hello";
	char *f;

	f = _strchr(s, 'l');

	if (f != NULL)
	{
		printf("%s\n", f);
	}
	return (0);
}
2-strchr.c/     0           0     0     644     251       `
#include "main.h"

/**
  * _strchr - search character on string
  * @s: pointer
  * @c: constant
  * Return: 0
  */

char *_strchr(char *s, char c)
{
	int a = 0;

	while (s[a] != '\0')
	{
		a++;
	if (s[a] ==  c)
		return (s + a);
	}
	return ('\0');
}

3-main.c/       0           0     0     644     231       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s = "hello, world";
	char *f = "oleh";
	unsigned int n;

	n = _strspn(s, f);
	printf("%u\n", n);
	return (0);
}

3-strspn.c/     0           0     0     644     406       `
#include "main.h"

/**
  * _strspn -  gets the length of a prefix substring
  * @s: pointer
  * @accept: pointer
  * Return: o
  */

unsigned int _strspn(char *s, char *accept)
{
	int length = 0;
	int a = 0;
	int b = 0;

	while (s[a] != '\0')
	{
		while (accept[b] != '\0')
		{
			if (accept[b] == s[a])
				length++;
			b++;
		}
		b = 0;
		a++;
		if (s[a] == ' ')
		{
			break;
		}
	}
	return (length);
}
4-main.c/       0           0     0     644     226       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s = "hello, world";
	char *f = "world";
	char *t;

	t = _strpbrk(s, f);
	printf("%s\n", t);
	return (0);
}
4-strpbrk.c/    0           0     0     644     364       `
#include "main.h"

/**
  * _strpbrk - search a string for any of a set of bytes
  * @s: string 1
  * @accept: string 2
  * Return: 0
  */

char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}
	return ('\0');
}
5-main.c/       0           0     0     644     227       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s = "hello, world";
	char *f = "world";
	char *t;

	t = _strstr(s, f);
		printf("%s\n", t);
		return (0);
}

5-strstr.c/     0           0     0     644     496       `
#include "main.h"

/**
  * _strstr - find the first ocurrence of the subtring.
  * @haystack: string
  * @needle: substring
  * Return: 0
  */

char *_strstr(char *haystack, char *needle)
{
	char *xhaystack;
	char *yneedle;

	while (*haystack != '\0')
	{
		xhaystack = haystack;
		yneedle = needle;

		while (*haystack != '\0' && *yneedle != '\0' && *haystack == *yneedle)
		{
			haystack++;
			yneedle++;
		}
		if (!*yneedle)
			return (xhaystack);
		haystack = xhaystack + 1;
	}
	return (0);
}
7-main.c/       0           0     0     644     523       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char board[8][8] = {
	{'r', 'k', 'b', 'q', 'k', 'b', 'k', 'r'},
	{'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'},
	{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
	{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
	{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
	{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
	{'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'},
	{'R', 'K', 'B', 'Q', 'K', 'B', 'K', 'R'},
	};
	print_chessboard(board);
	return (0);
}

/0              0           0     0     644     261       `
#include "main.h"

/**
  *print_chessboard - show the chessboard
  * @a: pointer
  * Return: 0
  */

void print_chessboard(char (*a)[8])
{
	int x;
	int y;

	for (x = 0; x < 8; x++)
	{
		for (y = 0; y < 8; y++)
		{
			putchar(a[x][y]);
		}
		putchar('\n');
	}
}

8-main.c/       0           0     0     644     464       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	int c3[3][3] = {
		{0, 1, 5},
		{10, 11, 12},
		{1000, 101, 102},
	};
	int c5[5][5] = {
		{0, 1, 5, 12124, 1234},
		{10, 11, 12, 123521, 12512},
		{1000, 101, 102, 12545, 214543435},
		{100, 1012451, 11102, 12545, 214543435},
		{10, 12401, 10452, 11542545, 1214543435},
	};
	print_diagsums((int *)c3, 3);
	print_diagsums((int *)c5, 5);
	return (0);
}
/22             0           0     0     644     448       `
#include "main.h"
#include <stdio.h>

/**
  * print_diagsums - prints the sums of the two diagonals
  * @a: pointer
  * @size: size of matrix
  * Return: no return
  */

void print_diagsums(int *a, int size)
{
	int i, sum1 = 0, sum2 = 0;

	for (i = 0; i < (size * size); i++)
	{
		if (i % (size + 1) == 0)
			sum1 += *(a + i);
		if (i % (size - 1) == 0 && i != 0 && i < size * size - 1)
			sum2 += *(a + i);
	}
	printf("%d, %d\n", sum1, sum2);
}


_putchar.c/     0           0     0     644     379       `
#include <unistd.h>

/**
       *  * _putchar - writes the character c to stdout
                *   * @c: The character to print
			      *    *
			      	            *     * Return: On success 1.
					    		           *      * On error, -1 is returned, and errno is set appropriately.
								   			           *       */
int _putchar(char c)
{
					return (write(1, &c, 1));
}

